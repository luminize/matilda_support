/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 71 generated on 2017-07-06 18:33:55.681721
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==71);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=((0.55145)*x3);
x7=((1.0)*x3);
x8=(x1*x2);
x9=(x0*x1);
x10=(x2*x4);
x11=((0.55145)*x4*x5);
eetrans[0]=(((x0*x11))+(((0.05)*x0))+((x6*x9))+(((0.615)*x9)));
eetrans[1]=((((-0.55145)*x10*x5))+(((-1.0)*x6*x8))+(((-0.05)*x2))+(((-0.615)*x8)));
eetrans[2]=((0.203)+(((-0.55145)*x1*x5))+((x4*x6))+(((0.615)*x4)));
IkReal x12=((1.0)*x10);
if( (((((((((-1.0)*x12*x5))+(((-1.0)*x7*x8))))*(IKcos(j[3]))))+((((((x5*x8))+(((-1.0)*x12*x7))))*(IKsin(j[3])))))) < -1-IKFAST_SINCOS_THRESH || (((((((((-1.0)*x12*x5))+(((-1.0)*x7*x8))))*(IKcos(j[3]))))+((((((x5*x8))+(((-1.0)*x12*x7))))*(IKsin(j[3])))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
eerot[0]=IKacos(((((((((-1.0)*x12*x5))+(((-1.0)*x7*x8))))*(IKcos(j[3]))))+((((((x5*x8))+(((-1.0)*x12*x7))))*(IKsin(j[3]))))));
return;
}
IKFAST_ASSERT(0);
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x4400000c; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_px=px;
new_py=py;
new_pz=pz;
new_r00=r00;
r00 = new_r00; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((-9.2887048433961)*pz))+(((22.8785833581185)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x13=((-0.24969)+(((1.23)*pz)));
CheckValue<IkReal> x16 = IKatan2WithCheck(IkReal(x13),-0.0615,IKFAST_ATAN2_MAGTHRESH);
if(!x16.valid){
continue;
}
IkReal x14=((1.0)*(x16.value));
if((((0.00378225)+(x13*x13))) < -0.00001)
continue;
CheckValue<IkReal> x17=IKPowWithIntegerCheck(IKabs(IKsqrt(((0.00378225)+(x13*x13)))),-1);
if(!x17.valid){
continue;
}
if( (((x17.value)*(((-0.1178368975)+(((-1.0)*(pz*pz)))+(((0.406)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x17.value)*(((-0.1178368975)+(((-1.0)*(pz*pz)))+(((0.406)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x15=IKasin(((x17.value)*(((-0.1178368975)+(((-1.0)*(pz*pz)))+(((0.406)*pz))))));
j1array[0]=((((-1.0)*x14))+(((-1.0)*x15)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x14))+x15);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x18=((1.81340103363859)*pz);
if( IKabs(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-0.368120409828634)*cj1))+((cj1*x18)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*sj1*x18)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-0.368120409828634)*cj1))+((cj1*x18))))+IKsqr(((((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*sj1*x18))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-0.368120409828634)*cj1))+((cj1*x18))), ((((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*sj1*x18))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x19=IKsin(j2);
IkReal x20=IKcos(j2);
IkReal x21=((0.203)*sj1);
IkReal x22=((1.0)*pz);
IkReal x23=((0.203)*cj1);
IkReal x24=(cj1*x19);
IkReal x25=((0.05)*x20);
IkReal x26=(sj1*x19);
IkReal x27=(pz*x20);
evalcond[0]=((((-1.0)*x21))+(((0.05)*cj1))+((pz*sj1))+(((0.55145)*x20)));
evalcond[1]=((0.615)+(((0.55145)*x19))+(((-1.0)*cj1*x22))+x23+(((0.05)*sj1)));
evalcond[2]=((((-1.0)*x19*x21))+(((-0.615)*x20))+((pz*x26))+(((-1.0)*x20*x23))+((cj1*x27))+(((0.05)*x24))+(((-1.0)*sj1*x25)));
evalcond[3]=((0.55145)+(((0.615)*x19))+(((-1.0)*x22*x24))+((x19*x23))+(((-1.0)*x20*x21))+((cj1*x25))+(((0.05)*x26))+((sj1*x27)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal evalcond[5]; int numsolutionsj3 = 0;
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
{
IkReal x28=IKsin(j1);
IkReal x29=IKcos(j1);
IkReal x30=IKcos(j2);
IkReal x31=IKsin(j2);
IkReal x32=((1.0)*pz);
IkReal x33=((0.05)*x29);
IkReal x34=((0.203)*x29);
IkReal x35=(pz*x28);
IkReal x36=(pz*x29);
IkReal x37=((0.05)*x28);
IkReal x38=((0.203)*x28);
IkReal x39=(x29*x31);
IkReal x40=(x28*x30);
evalcond[0]=((((-1.0)*x38))+(((0.55145)*x30))+x33+x35);
evalcond[1]=((0.615)+(((-1.0)*x29*x32))+(((0.55145)*x31))+x37+x34);
evalcond[2]=((-0.1178368975)+(((-0.0615)*x28))+(((-1.0)*pz*x32))+(((-0.24969)*x29))+(((1.23)*x36))+(((0.406)*pz)));
evalcond[3]=((((-1.0)*x30*x34))+(((-1.0)*x30*x37))+(((-1.0)*x31*x38))+(((-0.615)*x30))+((x30*x36))+((x31*x35))+((x31*x33)));
evalcond[4]=((0.55145)+(((0.615)*x31))+(((-1.0)*x30*x38))+(((-1.0)*x32*x39))+((x30*x33))+((x30*x35))+((x31*x37))+((x31*x34)));
if( IKabs(evalcond[0]) <= 0.0000010000000000  && IKabs(evalcond[1]) <= 0.0000010000000000  && IKabs(evalcond[2]) <= 0.0000010000000000  && IKabs(evalcond[3]) <= 0.0000010000000000  && IKabs(evalcond[4]) <= 0.0000010000000000  )
{
j3array[0]=0;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
numsolutionsj3 = 1;

} else
{
IkReal x41=IKsin(j1);
IkReal x42=IKcos(j1);
IkReal x43=IKcos(j2);
IkReal x44=IKsin(j2);
IkReal x45=((1.0)*pz);
IkReal x46=((0.05)*x42);
IkReal x47=((0.203)*x42);
IkReal x48=(pz*x41);
IkReal x49=(pz*x42);
IkReal x50=((0.05)*x41);
IkReal x51=((0.203)*x41);
IkReal x52=(x42*x44);
IkReal x53=(x41*x43);
evalcond[0]=((((0.55145)*x43))+x48+x46+(((-1.0)*x51)));
evalcond[1]=((0.615)+(((-1.0)*x42*x45))+(((0.55145)*x44))+x47+x50);
evalcond[2]=((-0.1178368975)+(((-0.0615)*x41))+(((-1.0)*pz*x45))+(((1.23)*x49))+(((-0.24969)*x42))+(((0.406)*pz)));
evalcond[3]=(((x43*x49))+(((-1.0)*x43*x47))+(((-0.615)*x43))+((x44*x48))+((x44*x46))+(((-1.0)*x44*x51))+(((-1.0)*x43*x50)));
evalcond[4]=((0.55145)+(((0.615)*x44))+(((-1.0)*x45*x52))+((x43*x46))+((x43*x48))+((x44*x50))+((x44*x47))+(((-1.0)*x43*x51)));
if( IKabs(evalcond[0]) <= 0.0000010000000000  && IKabs(evalcond[1]) <= 0.0000010000000000  && IKabs(evalcond[2]) <= 0.0000010000000000  && IKabs(evalcond[3]) <= 0.0000010000000000  && IKabs(evalcond[4]) <= 0.0000010000000000  )
{
j3array[0]=1.5707963267949;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
numsolutionsj3 = 1;

} else
{
IkReal x54=IKsin(j1);
IkReal x55=IKcos(j1);
IkReal x56=IKcos(j2);
IkReal x57=IKsin(j2);
IkReal x58=((1.0)*pz);
IkReal x59=((0.05)*x55);
IkReal x60=((0.203)*x55);
IkReal x61=(pz*x54);
IkReal x62=(pz*x55);
IkReal x63=((0.05)*x54);
IkReal x64=((0.203)*x54);
IkReal x65=(x55*x57);
IkReal x66=(x54*x56);
evalcond[0]=((((0.55145)*x56))+x59+x61+(((-1.0)*x64)));
evalcond[1]=((0.615)+(((0.55145)*x57))+(((-1.0)*x55*x58))+x60+x63);
evalcond[2]=((-0.1178368975)+(((-0.24969)*x55))+(((-1.0)*pz*x58))+(((1.23)*x62))+(((-0.0615)*x54))+(((0.406)*pz)));
evalcond[3]=((((-1.0)*x56*x60))+(((-1.0)*x56*x63))+(((-0.615)*x56))+((x57*x59))+((x57*x61))+((x56*x62))+(((-1.0)*x57*x64)));
evalcond[4]=((0.55145)+(((-1.0)*x56*x64))+((x57*x63))+((x57*x60))+(((-1.0)*x58*x65))+((x56*x61))+((x56*x59))+(((0.615)*x57)));
if( IKabs(evalcond[0]) <= 0.0000010000000000  && IKabs(evalcond[1]) <= 0.0000010000000000  && IKabs(evalcond[2]) <= 0.0000010000000000  && IKabs(evalcond[3]) <= 0.0000010000000000  && IKabs(evalcond[4]) <= 0.0000010000000000  )
{
j3array[0]=3.14159265358979;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
numsolutionsj3 = 1;

} else
{
IkReal x67=IKsin(j1);
IkReal x68=IKcos(j1);
IkReal x69=IKcos(j2);
IkReal x70=IKsin(j2);
IkReal x71=((1.0)*pz);
IkReal x72=((0.05)*x68);
IkReal x73=((0.203)*x68);
IkReal x74=(pz*x67);
IkReal x75=(pz*x68);
IkReal x76=((0.05)*x67);
IkReal x77=((0.203)*x67);
IkReal x78=(x68*x70);
IkReal x79=(x67*x69);
evalcond[0]=((((-1.0)*x77))+(((0.55145)*x69))+x74+x72);
evalcond[1]=((0.615)+x76+x73+(((-1.0)*x68*x71))+(((0.55145)*x70)));
evalcond[2]=((-0.1178368975)+(((1.23)*x75))+(((-0.0615)*x67))+(((-1.0)*pz*x71))+(((0.406)*pz))+(((-0.24969)*x68)));
evalcond[3]=((((-1.0)*x70*x77))+(((-0.615)*x69))+((x69*x75))+((x70*x74))+((x70*x72))+(((-1.0)*x69*x76))+(((-1.0)*x69*x73)));
evalcond[4]=((0.55145)+((x69*x72))+((x69*x74))+(((-1.0)*x71*x78))+((x70*x73))+((x70*x76))+(((-1.0)*x69*x77))+(((0.615)*x70)));
if( IKabs(evalcond[0]) <= 0.0000010000000000  && IKabs(evalcond[1]) <= 0.0000010000000000  && IKabs(evalcond[2]) <= 0.0000010000000000  && IKabs(evalcond[3]) <= 0.0000010000000000  && IKabs(evalcond[4]) <= 0.0000010000000000  )
{
j3array[0]=-1.5707963267949;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
numsolutionsj3 = 1;

} else
{
    continue;
}
}
}
}
}
if( numsolutionsj3 == 0 )
{
    continue;
}
for(int ij3 = 0; ij3 < numsolutionsj3; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutionsj3; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[1];
px=0;
py=0;
pp=pz*pz;
IkReal x80=((1.0)*cj1);
j0eval[0]=((((-1.0)*cj2*cj3*x80))+(((-1.0)*cj3*sj1*sj2))+(((-1.0)*sj2*sj3*x80))+((cj2*sj1*sj3)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x81=((1.0)*cj1);
CheckValue<IkReal> x82=IKPowWithIntegerCheck(((((-1.0)*cj2*cj3*x81))+(((-1.0)*cj3*sj1*sj2))+(((-1.0)*sj2*sj3*x81))+((cj2*sj1*sj3))),-1);
if(!x82.valid){
continue;
}
sj0array[0]=((x82.value)*(IKcos(r00)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-1.0)*py)),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
IkReal x83=x84.value;
j0array[0]=((-1.0)*x83);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x83)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x85=(cj0*px);
IkReal x86=(py*sj0);
j1eval[0]=((1.0)+(((-45.7571667162369)*x85*x86))+(((-9.2887048433961)*pz))+(((-2.28785833581185)*x85))+(((22.8785833581185)*(x85*x85)))+(((2.28785833581185)*x86))+(((22.8785833581185)*(pz*pz)))+(((22.8785833581185)*(x86*x86))));
j1eval[1]=((IKabs(((-0.24969)+(((1.23)*pz)))))+(IKabs(((-0.0615)+(((-1.23)*x86))+(((1.23)*x85))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x87=(cj0*px);
IkReal x88=(py*sj0);
IkReal x89=((-0.24969)+(((1.23)*pz)));
IkReal x90=((-0.0615)+(((-1.23)*x88))+(((1.23)*x87)));
CheckValue<IkReal> x93 = IKatan2WithCheck(IkReal(x89),x90,IKFAST_ATAN2_MAGTHRESH);
if(!x93.valid){
continue;
}
IkReal x91=((1.0)*(x93.value));
if((((x90*x90)+(x89*x89))) < -0.00001)
continue;
CheckValue<IkReal> x94=IKPowWithIntegerCheck(IKabs(IKsqrt(((x90*x90)+(x89*x89)))),-1);
if(!x94.valid){
continue;
}
if( (((x94.value)*(((-0.1178368975)+(((-1.0)*(px*px)))+(((0.1)*x87))+(((-1.0)*(pz*pz)))+(((-0.1)*x88))+(((-1.0)*(py*py)))+(((0.406)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x94.value)*(((-0.1178368975)+(((-1.0)*(px*px)))+(((0.1)*x87))+(((-1.0)*(pz*pz)))+(((-0.1)*x88))+(((-1.0)*(py*py)))+(((0.406)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x92=IKasin(((x94.value)*(((-0.1178368975)+(((-1.0)*(px*px)))+(((0.1)*x87))+(((-1.0)*(pz*pz)))+(((-0.1)*x88))+(((-1.0)*(py*py)))+(((0.406)*pz))))));
j1array[0]=((((-1.0)*x92))+(((-1.0)*x91)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x92+(((-1.0)*x91)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x95=((1.81340103363859)*sj1);
IkReal x96=(py*sj0);
IkReal x97=((1.81340103363859)*cj1);
IkReal x98=(cj0*px);
if( IKabs(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-1.0)*x95*x96))+(((-0.368120409828634)*cj1))+((pz*x97))+((x95*x98)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*pz*x95))+((x97*x98))+(((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*x96*x97)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-1.0)*x95*x96))+(((-0.368120409828634)*cj1))+((pz*x97))+((x95*x98))))+IKsqr(((((-1.0)*pz*x95))+((x97*x98))+(((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*x96*x97))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.11524163568773)+(((-0.0906700516819295)*sj1))+(((-1.0)*x95*x96))+(((-0.368120409828634)*cj1))+((pz*x97))+((x95*x98))), ((((-1.0)*pz*x95))+((x97*x98))+(((0.368120409828634)*sj1))+(((-0.0906700516819295)*cj1))+(((-1.0)*x96*x97))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x99=IKsin(j2);
IkReal x100=IKcos(j2);
IkReal x101=((0.203)*sj1);
IkReal x102=(py*sj0);
IkReal x103=((0.05)*sj1);
IkReal x104=((1.0)*cj1);
IkReal x105=(cj0*px);
IkReal x106=(cj1*x99);
IkReal x107=(cj1*x100);
IkReal x108=(sj1*x105);
IkReal x109=(sj1*x99);
IkReal x110=(sj1*x100);
evalcond[0]=((((-1.0)*x104*x105))+((cj1*x102))+(((-1.0)*x101))+(((0.05)*cj1))+((pz*sj1))+(((0.55145)*x100)));
evalcond[1]=((0.615)+(((-1.0)*pz*x104))+((sj1*x102))+(((0.55145)*x99))+x103+(((-1.0)*x108))+(((0.203)*cj1)));
evalcond[2]=((((-0.203)*x107))+(((-1.0)*x100*x103))+(((-1.0)*x102*x110))+((pz*x109))+((pz*x107))+((x102*x106))+(((-1.0)*x101*x99))+(((-0.615)*x100))+(((0.05)*x106))+(((-1.0)*x104*x105*x99))+((x100*x108)));
evalcond[3]=((0.55145)+((pz*x110))+(((-1.0)*x100*x101))+((x103*x99))+(((0.615)*x99))+(((0.203)*x106))+((x102*x107))+((x102*x109))+(((-1.0)*pz*x104*x99))+(((-1.0)*x100*x104*x105))+(((0.05)*x107))+(((-1.0)*x108*x99)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x111=sj0*sj0;
IkReal x112=sj1*sj1;
IkReal x113=cj2*cj2;
IkReal x114=cj1*cj1;
IkReal x115=sj2*sj2;
IkReal x116=(cj2*sj0);
IkReal x117=((1.0)*sj0*sj2);
IkReal x118=(x111*x114);
IkReal x119=(x111*x112);
j3eval[0]=((IKabs((((sj1*x116))+(((-1.0)*cj1*x117)))))+(IKabs(((((-1.0)*sj1*x117))+(((-1.0)*cj1*x116))))));
j3eval[1]=(((x113*x118))+((x113*x119))+((x115*x118))+((x115*x119)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[8];
bool bgotonextstatement = true;
do
{
IkReal x120=(pz*sj2);
IkReal x121=((0.203)*sj1);
IkReal x122=(px*sj1);
IkReal x123=((1.0)*cj1);
IkReal x124=((0.05)*sj1);
IkReal x125=((0.203)*cj1);
IkReal x126=((0.05)*cj1);
IkReal x127=(cj1*pz);
IkReal x128=(pz*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-1.0)*py);
evalcond[2]=((((-1.0)*px*x123))+(((0.55145)*cj2))+(((-1.0)*x121))+x126+x128);
evalcond[3]=((0.615)+(((-1.0)*pz*x123))+x124+x125+(((0.55145)*sj2))+(((-1.0)*x122)));
evalcond[4]=((-1.0)*(IKcos(r00)));
evalcond[5]=((-0.1178368975)+(((-1.0)*(px*px)))+(((-0.24969)*cj1))+(((-0.0615)*sj1))+(((-1.0)*(pz*pz)))+(((0.1)*px))+(((-1.0)*(py*py)))+(((0.406)*pz))+(((1.23)*x127))+(((1.23)*x122)));
evalcond[6]=(((cj2*x122))+((cj2*x127))+(((-1.0)*sj2*x121))+((sj2*x126))+(((-1.0)*cj2*x125))+(((-1.0)*cj2*x124))+(((-1.0)*px*sj2*x123))+((sj1*x120))+(((-0.615)*cj2)));
evalcond[7]=((0.55145)+(((-1.0)*x120*x123))+(((-1.0)*sj2*x122))+((cj2*x128))+((cj2*x126))+((sj2*x124))+((sj2*x125))+(((-1.0)*cj2*x121))+(((-1.0)*cj2*px*x123))+(((0.615)*sj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[4], cj3array[4], sj3array[4];
bool j3valid[4]={false};
_nj3 = 4;
j3array[0]=0;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=1.5707963267949;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
j3array[2]=3.14159265358979;
sj3array[2]=IKsin(j3array[2]);
cj3array[2]=IKcos(j3array[2]);
j3array[3]=-1.5707963267949;
sj3array[3]=IKsin(j3array[3]);
cj3array[3]=IKcos(j3array[3]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
if( j3array[2] > IKPI )
{
    j3array[2]-=IK2PI;
}
else if( j3array[2] < -IKPI )
{    j3array[2]+=IK2PI;
}
j3valid[2] = true;
if( j3array[3] > IKPI )
{
    j3array[3]-=IK2PI;
}
else if( j3array[3] < -IKPI )
{    j3array[3]+=IK2PI;
}
j3valid[3] = true;
for(int ij3 = 0; ij3 < 4; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 4; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x129=(pz*sj2);
IkReal x130=((0.203)*sj1);
IkReal x131=((1.0)*cj1);
IkReal x132=(cj2*sj1);
IkReal x133=((0.05)*sj2);
IkReal x134=(px*sj1);
IkReal x135=((0.203)*cj1);
IkReal x136=(cj1*pz);
IkReal x137=(cj1*px);
IkReal x138=((0.05)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=py;
evalcond[2]=((((0.55145)*cj2))+x137+x138+(((-1.0)*x130))+((pz*sj1)));
evalcond[3]=((0.615)+(((-1.0)*pz*x131))+x135+x134+(((0.55145)*sj2))+(((0.05)*sj1)));
evalcond[4]=((-1.0)*(IKcos(r00)));
evalcond[5]=((-0.1178368975)+(((-1.0)*(px*px)))+(((-0.24969)*cj1))+(((-1.23)*x134))+(((-0.0615)*sj1))+(((-1.0)*(pz*pz)))+(((-0.1)*px))+(((1.23)*x136))+(((-1.0)*(py*py)))+(((0.406)*pz)));
evalcond[6]=((((-1.0)*sj2*x130))+((cj2*x136))+((sj2*x137))+(((-1.0)*px*x132))+(((-1.0)*cj2*x135))+(((-0.05)*x132))+((sj1*x129))+((cj1*x133))+(((-0.615)*cj2)));
evalcond[7]=((0.55145)+((cj2*x137))+((cj2*x138))+((sj2*x134))+((sj2*x135))+((pz*x132))+(((-1.0)*cj2*x130))+(((-1.0)*x129*x131))+((sj1*x133))+(((0.615)*sj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[4], cj3array[4], sj3array[4];
bool j3valid[4]={false};
_nj3 = 4;
j3array[0]=0;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=1.5707963267949;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
j3array[2]=3.14159265358979;
sj3array[2]=IKsin(j3array[2]);
cj3array[2]=IKcos(j3array[2]);
j3array[3]=-1.5707963267949;
sj3array[3]=IKsin(j3array[3]);
cj3array[3]=IKcos(j3array[3]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
if( j3array[2] > IKPI )
{
    j3array[2]-=IK2PI;
}
else if( j3array[2] < -IKPI )
{    j3array[2]+=IK2PI;
}
j3valid[2] = true;
if( j3array[3] > IKPI )
{
    j3array[3]-=IK2PI;
}
else if( j3array[3] < -IKPI )
{    j3array[3]+=IK2PI;
}
j3valid[3] = true;
for(int ij3 = 0; ij3 < 4; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 4; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x139=(cj2*sj0);
IkReal x140=((1.0)*sj0*sj2);
IkReal x141=((((-1.0)*cj1*x140))+((sj1*x139)));
IkReal x142=((((-1.0)*sj1*x140))+(((-1.0)*cj1*x139)));
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(x142),x141,IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
IkReal x143=((1.0)*(x145.value));
if((((x141*x141)+(x142*x142))) < -0.00001)
continue;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKabs(IKsqrt(((x141*x141)+(x142*x142)))),-1);
if(!x146.valid){
continue;
}
if( (((x146.value)*(IKcos(r00)))) < -1-IKFAST_SINCOS_THRESH || (((x146.value)*(IKcos(r00)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x144=IKasin(((x146.value)*(IKcos(r00))));
j3array[0]=((((-1.0)*x143))+x144);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x143))+(((-1.0)*x144)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f01b084b2f20efad296fc7039f2f69b5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
